Only in .: diff.out
Only in .: eclipse-java-formatter.xml
Only in .: LICENSE.txt
Only in .: NOTICE.txt
diff -pur ../avro_clean/lang/java/avro/pom.xml ./pom.xml
--- ../avro_clean/lang/java/avro/pom.xml	2024-03-21 13:55:19.942205358 -0500
+++ ./pom.xml	2024-03-21 08:43:20.673130028 -0500
@@ -16,239 +16,281 @@
    limitations under the License.
 -->
 <project
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
-  xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <artifactId>avro-parent</artifactId>
-    <groupId>org.apache.avro</groupId>
-    <version>1.11.3</version>
-    <relativePath>../</relativePath>
-  </parent>
-
-  <artifactId>avro</artifactId>
-
-  <name>Apache Avro</name>
-  <url>https://avro.apache.org</url>
-  <description>Avro core components</description>
-  <packaging>bundle</packaging>
-
-  <properties>
-    <main.basedir>${project.parent.parent.basedir}</main.basedir>
-    <osgi.import>
-      !org.apache.avro*,
-      com.fasterxml.jackson*,
-      org.xerial.snappy;resolution:=optional,
-      sun.misc;resolution:=optional,
-      *
-    </osgi.import>
-    <osgi.export>org.apache.avro*;version="${project.version}"</osgi.export>
-  </properties>
-
-  <build>
-    <resources>
-      <resource>
-        <directory>../../../share/schemas</directory>
-        <includes>
-          <include>org/apache/avro/data/Json.avsc</include>
-        </includes>
-      </resource>
-    </resources>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-jar-plugin</artifactId>
-        <configuration>
-          <archive>
-            <manifestEntries>
-              <Automatic-Module-Name>org.apache.avro</Automatic-Module-Name>
-            </manifestEntries>
-          </archive>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-surefire-plugin</artifactId>
-        <configuration>
-          <parallel>none</parallel>
-        </configuration>
-        <executions>
-          <execution>
-            <id>test-with-custom-coders</id>
-            <phase>test</phase>
-            <goals>
-              <goal>test</goal>
-            </goals>
-            <configuration>
-              <systemPropertyVariables>
-                <org.apache.avro.specific.use_custom_coders>true</org.apache.avro.specific.use_custom_coders>
-              </systemPropertyVariables>
-            </configuration>
-          </execution>
-          <execution>
-            <id>test-with-fast-reader</id>
-            <phase>test</phase>
-            <goals>
-              <goal>test</goal>
-            </goals>
-            <configuration>
-              <systemPropertyVariables>
-                <org.apache.avro.fastread>true</org.apache.avro.fastread>
-              </systemPropertyVariables>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
-    </plugins>
-  </build>
-
-  <profiles>
-    <profile>
-      <id>interop-data-generate</id>
-      <activation>
-        <activeByDefault>false</activeByDefault>
-      </activation>
-      <build>
+    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
+    xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.jfxmodules</groupId>
+    <artifactId>avro-module</artifactId>
+    <version>1.11.3-SNAPSHOT</version>
+    <packaging>jar</packaging> 
+
+    <name>avro-module</name>
+    <url>https://maven.pkg.github.com/jfxmodules/avro</url>
+    <description>Avro core components</description>
+
+    <properties>
+        <maven.compiler.source>21</maven.compiler.source>
+        <maven.compiler.target>21</maven.compiler.target>
+    </properties>
+  
+    <distributionManagement>
+        <repository>
+            <id>github</id>
+            <name>GitHub jfxmodules Apache Maven Packages</name>
+            <url>https://maven.pkg.github.com/jfxmodules/avro</url>
+        </repository>
+    </distributionManagement>
+
+    <build>
+        <resources>
+            <resource>
+                <directory>./share/test/schemas</directory>
+                <includes>
+                    <include>org/apache/avro/data/Json.avsc</include>
+                </includes>
+            </resource>
+        </resources>
         <plugins>
-          <plugin>
-            <groupId>org.codehaus.mojo</groupId>
-            <artifactId>exec-maven-plugin</artifactId>
-            <version>${exec-plugin.version}</version>
-            <executions>
-              <!-- Generate random data for interop tests, using null codec -->
-              <execution>
-                <id>interop-generate-null-codec</id>
-                <phase>generate-resources</phase>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-surefire-plugin</artifactId>
+                <version>3.1.2</version>
                 <configuration>
-                  <mainClass>org.apache.avro.util.RandomData</mainClass>
-                  <arguments>
-                    <argument>../../../share/test/schemas/interop.avsc</argument>
-                    <argument>../../../build/interop/data/java.avro</argument>
-                    <argument>100</argument>
-                  </arguments>
+                    <parallel>none</parallel>
                 </configuration>
-                <goals><goal>java</goal></goals>
-              </execution>
-
-              <!-- Generate random data for interop tests, using deflate codec -->
-              <execution>
-                <id>interop-generate-deflate-codec</id>
-                <phase>generate-resources</phase>
-                <configuration>
-                  <mainClass>org.apache.avro.util.RandomData</mainClass>
-                  <arguments>
-                    <argument>../../../share/test/schemas/interop.avsc</argument>
-                    <argument>../../../build/interop/data/java_deflate.avro</argument>
-                    <argument>100</argument>
-                    <argument>deflate</argument>
-                  </arguments>
-                </configuration>
-                <goals><goal>java</goal></goals>
-              </execution>
-
-              <!-- Generate random data for interop tests, using snappy codec -->
-              <execution>
-                <id>interop-generate-snappy-codec</id>
-                <phase>generate-resources</phase>
-                <configuration>
-                  <mainClass>org.apache.avro.util.RandomData</mainClass>
-                  <arguments>
-                    <argument>../../../share/test/schemas/interop.avsc</argument>
-                    <argument>../../../build/interop/data/java_snappy.avro</argument>
-                    <argument>100</argument>
-                    <argument>snappy</argument>
-                  </arguments>
-                </configuration>
-                <goals><goal>java</goal></goals>
-              </execution>
-
-              <!-- Generate random data for interop tests, using bzip2 codec -->
-              <execution>
-                <id>interop-generate-bzip2-codec</id>
-                <phase>generate-resources</phase>
-                <configuration>
-                  <mainClass>org.apache.avro.util.RandomData</mainClass>
-                  <arguments>
-                    <argument>../../../share/test/schemas/interop.avsc</argument>
-                    <argument>../../../build/interop/data/java_bzip2.avro</argument>
-                    <argument>100</argument>
-                    <argument>bzip2</argument>
-                  </arguments>
-                </configuration>
-                <goals><goal>java</goal></goals>
-              </execution>
-
-              <!-- Generate random data for interop tests, using xz codec -->
-              <execution>
-                <id>interop-generate-xz-codec</id>
-                <phase>generate-resources</phase>
-                <configuration>
-                  <mainClass>org.apache.avro.util.RandomData</mainClass>
-                  <arguments>
-                    <argument>../../../share/test/schemas/interop.avsc</argument>
-                    <argument>../../../build/interop/data/java_xz.avro</argument>
-                    <argument>100</argument>
-                    <argument>xz</argument>
-                  </arguments>
-                </configuration>
-                <goals><goal>java</goal></goals>
-              </execution>
-
-              <!-- Generate random data for interop tests, using zstandard codec -->
-              <execution>
-                <id>interop-generate-zstandard-codec</id>
-                <phase>generate-resources</phase>
-                <configuration>
-                  <mainClass>org.apache.avro.util.RandomData</mainClass>
-                  <arguments>
-                    <argument>../../../share/test/schemas/interop.avsc</argument>
-                    <argument>../../../build/interop/data/java_zstandard.avro</argument>
-                    <argument>100</argument>
-                    <argument>zstandard</argument>
-                  </arguments>
-                </configuration>
-                <goals><goal>java</goal></goals>
-              </execution>
-            </executions>
-          </plugin>
+                <executions>
+                    <execution>
+                        <id>test-with-custom-coders</id>
+                        <phase>test</phase>
+                        <goals>
+                            <goal>test</goal>
+                        </goals>
+                        <configuration>
+                            <systemPropertyVariables>
+                                <org.apache.avro.specific.use_custom_coders>true</org.apache.avro.specific.use_custom_coders>
+                            </systemPropertyVariables>
+                        </configuration>
+                    </execution>
+                    <execution>
+                        <id>test-with-fast-reader</id>
+                        <phase>test</phase>
+                        <goals>
+                            <goal>test</goal>
+                        </goals>
+                        <configuration>
+                            <systemPropertyVariables>
+                                <org.apache.avro.fastread>true</org.apache.avro.fastread>
+                            </systemPropertyVariables>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
         </plugins>
-      </build>
-    </profile>
-  </profiles>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.fasterxml.jackson.core</groupId>
-      <artifactId>jackson-core</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>com.fasterxml.jackson.core</groupId>
-      <artifactId>jackson-databind</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.commons</groupId>
-      <artifactId>commons-compress</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>org.xerial.snappy</groupId>
-      <artifactId>snappy-java</artifactId>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>org.tukaani</groupId>
-      <artifactId>xz</artifactId>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>com.github.luben</groupId>
-      <artifactId>zstd-jni</artifactId>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>org.hamcrest</groupId>
-      <artifactId>hamcrest-library</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
+    </build>
+
+    <profiles>
+        <profile>
+            <id>interop-data-generate</id>
+            <activation>
+                <activeByDefault>false</activeByDefault>
+            </activation>
+            <build>
+                <plugins>
+                    <plugin>
+                        <groupId>org.codehaus.mojo</groupId>
+                        <artifactId>exec-maven-plugin</artifactId>
+                        <version>${exec-plugin.version}</version>
+                        <executions>
+                            <!-- Generate random data for interop tests, using null codec -->
+                            <execution>
+                                <id>interop-generate-null-codec</id>
+                                <phase>generate-resources</phase>
+                                <configuration>
+                                    <mainClass>org.apache.avro.util.RandomData</mainClass>
+                                    <arguments>
+                                        <argument>./share/test/schemas/interop.avsc</argument>
+                                        <argument>./build/interop/data/java.avro</argument>
+                                        <argument>100</argument>
+                                    </arguments>
+                                </configuration>
+                                <goals>
+                                    <goal>java</goal>
+                                </goals>
+                            </execution>
+
+                            <!-- Generate random data for interop tests, using deflate codec -->
+                            <execution>
+                                <id>interop-generate-deflate-codec</id>
+                                <phase>generate-resources</phase>
+                                <configuration>
+                                    <mainClass>org.apache.avro.util.RandomData</mainClass>
+                                    <arguments>
+                                        <argument>./share/test/schemas/interop.avsc</argument>
+                                        <argument>./build/interop/data/java_deflate.avro</argument>
+                                        <argument>100</argument>
+                                        <argument>deflate</argument>
+                                    </arguments>
+                                </configuration>
+                                <goals>
+                                    <goal>java</goal>
+                                </goals>
+                            </execution>
+
+                            <!-- Generate random data for interop tests, using snappy codec -->
+                            <execution>
+                                <id>interop-generate-snappy-codec</id>
+                                <phase>generate-resources</phase>
+                                <configuration>
+                                    <mainClass>org.apache.avro.util.RandomData</mainClass>
+                                    <arguments>
+                                        <argument>./share/test/schemas/interop.avsc</argument>
+                                        <argument>./build/interop/data/java_snappy.avro</argument>
+                                        <argument>100</argument>
+                                        <argument>snappy</argument>
+                                    </arguments>
+                                </configuration>
+                                <goals>
+                                    <goal>java</goal>
+                                </goals>
+                            </execution>
+
+                            <!-- Generate random data for interop tests, using bzip2 codec -->
+                            <execution>
+                                <id>interop-generate-bzip2-codec</id>
+                                <phase>generate-resources</phase>
+                                <configuration>
+                                    <mainClass>org.apache.avro.util.RandomData</mainClass>
+                                    <arguments>
+                                        <argument>./share/test/schemas/interop.avsc</argument>
+                                        <argument>./build/interop/data/java_bzip2.avro</argument>
+                                        <argument>100</argument>
+                                        <argument>bzip2</argument>
+                                    </arguments>
+                                </configuration>
+                                <goals>
+                                    <goal>java</goal>
+                                </goals>
+                            </execution>
+
+                            <!-- Generate random data for interop tests, using xz codec -->
+                            <execution>
+                                <id>interop-generate-xz-codec</id>
+                                <phase>generate-resources</phase>
+                                <configuration>
+                                    <mainClass>org.apache.avro.util.RandomData</mainClass>
+                                    <arguments>
+                                        <argument>./share/test/schemas/interop.avsc</argument>
+                                        <argument>./build/interop/data/java_xz.avro</argument>
+                                        <argument>100</argument>
+                                        <argument>xz</argument>
+                                    </arguments>
+                                </configuration>
+                                <goals>
+                                    <goal>java</goal>
+                                </goals>
+                            </execution>
+
+                            <!-- Generate random data for interop tests, using zstandard codec -->
+                            <execution>
+                                <id>interop-generate-zstandard-codec</id>
+                                <phase>generate-resources</phase>
+                                <configuration>
+                                    <mainClass>org.apache.avro.util.RandomData</mainClass>
+                                    <arguments>
+                                        <argument>./share/test/schemas/interop.avsc</argument>
+                                        <argument>./build/interop/data/java_zstandard.avro</argument>
+                                        <argument>100</argument>
+                                        <argument>zstandard</argument>
+                                    </arguments>
+                                </configuration>
+                                <goals>
+                                    <goal>java</goal>
+                                </goals>
+                            </execution>
+                        </executions>
+                    </plugin>
+                </plugins>
+            </build>
+        </profile>
+    </profiles>
+
+    <dependencies>
+        <dependency>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-core</artifactId>
+            <version>2.16.1</version>
+        </dependency>
+        <dependency>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-databind</artifactId>
+            <version>2.16.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-compress</artifactId>
+            <version>1.26.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>
+            <version>2.0.9</version>
+            <type>jar</type>
+        </dependency>  
+        <dependency>
+            <!-- For org.apache.commons.compress.compressors.snappy:
+            - FramedSnappyCompressorInputStream
+            - FramedSnappyCompressorOutputStream
+            - org.apache.commons.compress.compressors.lz4 -->
+            <groupId>commons-codec</groupId>
+            <artifactId>commons-codec</artifactId>
+            <version>1.16.0</version>
+            <optional>true</optional>
+        </dependency>
+        
+        <!-- Test dependencies -->
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <version>4.13.2</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.hamcrest</groupId>
+            <artifactId>hamcrest-library</artifactId>
+            <scope>test</scope>
+            <version>2.2</version>
+        </dependency>
+        <dependency>
+            <groupId>org.hamcrest</groupId>
+            <artifactId>hamcrest</artifactId>
+            <version>2.2</version>
+            <scope>test</scope>
+            <type>jar</type>
+        </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-core</artifactId>
+            <scope>test</scope>
+            <version>5.3.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-api</artifactId>
+            <version>5.10.2</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-params</artifactId>
+            <version>5.10.1</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-engine</artifactId>
+            <version>5.10.1</version>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
 </project>
Only in .: README.md
Only in .: share
Only in ./src/main/java: module-info.java
diff -pur ../avro_clean/lang/java/avro/src/main/java/org/apache/avro/file/CodecFactory.java ./src/main/java/org/apache/avro/file/CodecFactory.java
--- ../avro_clean/lang/java/avro/src/main/java/org/apache/avro/file/CodecFactory.java	2024-03-21 13:55:19.942205358 -0500
+++ ./src/main/java/org/apache/avro/file/CodecFactory.java	2024-03-16 18:35:18.750920023 -0500
@@ -55,14 +55,6 @@ public abstract class CodecFactory {
     return new DeflateCodec.Option(compressionLevel);
   }
 
-  /**
-   * XZ codec, with specific compression. compressionLevel should be between 1 and
-   * 9, inclusive.
-   */
-  public static CodecFactory xzCodec(int compressionLevel) {
-    return new XZCodec.Option(compressionLevel);
-  }
-
   /** Snappy codec. */
   public static CodecFactory snappyCodec() {
     try {
@@ -78,45 +70,6 @@ public abstract class CodecFactory {
     return new BZip2Codec.Option();
   }
 
-  /**
-   * zstandard codec, with specific compression level.
-   *
-   * @param level The compression level should be between -5 and 22, inclusive.
-   *              Negative levels are 'fast' modes akin to lz4 or snappy, levels
-   *              above 9 are generally for archival purposes, and levels above 18
-   *              use a lot of memory.
-   */
-  public static CodecFactory zstandardCodec(int level) {
-    return new ZstandardCodec.Option(level, false, false);
-  }
-
-  /**
-   * zstandard codec, with specific compression level.
-   *
-   * @param level       The compression level should be between -5 and 22,
-   *                    inclusive. Negative levels are 'fast' modes akin to lz4 or
-   *                    snappy, levels above 9 are generally for archival
-   *                    purposes, and levels above 18 use a lot of memory.
-   * @param useChecksum if true, will include a checksum with each data block
-   */
-  public static CodecFactory zstandardCodec(int level, boolean useChecksum) {
-    return new ZstandardCodec.Option(level, useChecksum, false);
-  }
-
-  /**
-   * zstandard codec, with specific compression level, checksum, and bufferPool
-   *
-   * @param level         The compression level should be between -5 and 22,
-   *                      inclusive. Negative levels are 'fast' modes akin to lz4
-   *                      or snappy, levels above 9 are generally for archival
-   *                      purposes, and levels above 18 use a lot of memory.
-   * @param useChecksum   if true, will include a checksum with each data block
-   * @param useBufferPool if true, will use recycling buffer pool
-   */
-  public static CodecFactory zstandardCodec(int level, boolean useChecksum, boolean useBufferPool) {
-    return new ZstandardCodec.Option(level, useChecksum, useBufferPool);
-  }
-
   /** Creates internal Codec. */
   protected abstract Codec createInstance();
 
@@ -127,16 +80,11 @@ public abstract class CodecFactory {
   private static final Map<String, CodecFactory> REGISTERED = new HashMap<>();
 
   public static final int DEFAULT_DEFLATE_LEVEL = Deflater.DEFAULT_COMPRESSION;
-  public static final int DEFAULT_XZ_LEVEL = XZCodec.DEFAULT_COMPRESSION;
-  public static final int DEFAULT_ZSTANDARD_LEVEL = ZstandardCodec.DEFAULT_COMPRESSION;
-  public static final boolean DEFAULT_ZSTANDARD_BUFFERPOOL = ZstandardCodec.DEFAULT_USE_BUFFERPOOL;
 
   static {
     addCodec(DataFileConstants.NULL_CODEC, nullCodec());
     addCodec(DataFileConstants.DEFLATE_CODEC, deflateCodec(DEFAULT_DEFLATE_LEVEL));
     addCodec(DataFileConstants.BZIP2_CODEC, bzip2Codec());
-    addCodec(DataFileConstants.XZ_CODEC, xzCodec(DEFAULT_XZ_LEVEL));
-    addCodec(DataFileConstants.ZSTANDARD_CODEC, zstandardCodec(DEFAULT_ZSTANDARD_LEVEL, DEFAULT_ZSTANDARD_BUFFERPOOL));
     addCodec(DataFileConstants.SNAPPY_CODEC, snappyCodec());
   }
 
diff -pur ../avro_clean/lang/java/avro/src/main/java/org/apache/avro/file/SnappyCodec.java ./src/main/java/org/apache/avro/file/SnappyCodec.java
--- ../avro_clean/lang/java/avro/src/main/java/org/apache/avro/file/SnappyCodec.java	2024-03-21 13:54:43.625244605 -0500
+++ ./src/main/java/org/apache/avro/file/SnappyCodec.java	2024-03-16 19:57:48.065583507 -0500
@@ -15,25 +15,33 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
+/**
+ * This file changed from the original Apache Avro version.
+ */
 package org.apache.avro.file;
 
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
 import java.io.IOException;
-import java.nio.Buffer;
 import java.nio.ByteBuffer;
-import java.util.zip.CRC32;
+import static org.apache.avro.file.Codec.computeOffset;
+
+import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
+import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
 
-import org.xerial.snappy.Snappy;
 
 /** * Implements Snappy compression and decompression. */
 public class SnappyCodec extends Codec {
-  private CRC32 crc32 = new CRC32();
+  private static final int DEFAULT_BUFFER_SIZE = 8192;
 
   static class Option extends CodecFactory {
-    static {
+    /*
+      static {
       // if snappy isn't available, this will throw an exception which we
       // can catch so we can avoid registering this codec
       Snappy.getNativeLibraryVersion();
-    }
+    }*/
 
     @Override
     protected Codec createInstance() {
@@ -50,32 +58,34 @@ public class SnappyCodec extends Codec {
   }
 
   @Override
-  public ByteBuffer compress(ByteBuffer in) throws IOException {
-    int offset = computeOffset(in);
-    ByteBuffer out = ByteBuffer.allocate(Snappy.maxCompressedLength(in.remaining()) + 4);
-    int size = Snappy.compress(in.array(), offset, in.remaining(), out.array(), 0);
-    crc32.reset();
-    crc32.update(in.array(), offset, in.remaining());
-    out.putInt(size, (int) crc32.getValue());
-
-    ((Buffer) out).limit(size + 4);
-
+  public ByteBuffer compress(ByteBuffer data) throws IOException {
+    int offset = computeOffset(data);
+    var outputStream = new ByteArrayOutputStream();
+    try (var compressor = new FramedSnappyCompressorOutputStream(outputStream)) {
+        compressor.write(data.array(), offset, data.remaining());
+        compressor.finish();
+    }
+    var compressed = outputStream.toByteArray();
+    ByteBuffer out = ByteBuffer.allocate(compressed.length);
+    out.put(compressed);
+    out.position(0);
     return out;
   }
 
   @Override
-  public ByteBuffer decompress(ByteBuffer in) throws IOException {
-    int offset = computeOffset(in);
-    ByteBuffer out = ByteBuffer.allocate(Snappy.uncompressedLength(in.array(), offset, in.remaining() - 4));
-    int size = Snappy.uncompress(in.array(), offset, in.remaining() - 4, out.array(), 0);
-    ((Buffer) out).limit(size);
-
-    crc32.reset();
-    crc32.update(out.array(), 0, size);
-    if (in.getInt(((Buffer) in).limit() - 4) != (int) crc32.getValue())
-      throw new IOException("Checksum failure");
-
-    return out;
+  public ByteBuffer decompress(ByteBuffer data) throws IOException {
+    var bytes = new byte[0];
+    try (var bytesIn = new ByteArrayInputStream(data.array(), computeOffset(data), data.remaining());
+         var decompressor = new FramedSnappyCompressorInputStream(bytesIn)) {
+        int i;
+        var outputStream = new ByteArrayOutputStream();
+        while (-1 != (i = decompressor.read())) {
+            outputStream.write(i);
+        }
+        outputStream.flush();
+        bytes = outputStream.toByteArray();
+    }
+    return ByteBuffer.wrap(bytes);
   }
 
   @Override
Only in ../avro_clean/lang/java/avro/src/main/java/org/apache/avro/file: XZCodec.java
Only in ../avro_clean/lang/java/avro/src/main/java/org/apache/avro/file: ZstandardCodec.java
Only in ../avro_clean/lang/java/avro/src/main/java/org/apache/avro/file: ZstandardLoader.java
diff -pur ../avro_clean/lang/java/avro/src/test/java/org/apache/avro/file/TestAllCodecs.java ./src/test/java/org/apache/avro/file/TestAllCodecs.java
--- ../avro_clean/lang/java/avro/src/test/java/org/apache/avro/file/TestAllCodecs.java	2024-03-21 13:55:19.946205463 -0500
+++ ./src/test/java/org/apache/avro/file/TestAllCodecs.java	2024-03-16 18:47:35.251845977 -0500
@@ -35,8 +35,8 @@ public class TestAllCodecs {
 
   @Parameterized.Parameters(name = "{index}: codec={0}")
   public static Collection<Object[]> data() {
-    return Arrays.asList(new Object[][] { { "bzip2", BZip2Codec.class }, { "zstandard", ZstandardCodec.class },
-        { "null", NullCodec.class }, { "xz", XZCodec.class }, { "snappy", SnappyCodec.class },
+    return Arrays.asList(new Object[][] { { "bzip2", BZip2Codec.class }, 
+        { "null", NullCodec.class }, { "snappy", SnappyCodec.class },
         { "deflate", DeflateCodec.class }, });
   }
 
Only in ../avro_clean/lang/java/avro/src/test/java/org/apache/avro/file: TestZstandardCodec.java
diff -pur ../avro_clean/lang/java/avro/src/test/java/org/apache/avro/TestDataFileConcat.java ./src/test/java/org/apache/avro/TestDataFileConcat.java
--- ../avro_clean/lang/java/avro/src/test/java/org/apache/avro/TestDataFileConcat.java	2024-03-21 13:55:19.946205463 -0500
+++ ./src/test/java/org/apache/avro/TestDataFileConcat.java	2024-03-16 18:46:56.156914583 -0500
@@ -66,10 +66,6 @@ public class TestDataFileConcat {
     r.add(new Object[] { CodecFactory.deflateCodec(1), CodecFactory.deflateCodec(6), true });
     r.add(new Object[] { CodecFactory.deflateCodec(3), CodecFactory.nullCodec(), false });
     r.add(new Object[] { CodecFactory.nullCodec(), CodecFactory.deflateCodec(6), false });
-    r.add(new Object[] { CodecFactory.xzCodec(1), CodecFactory.xzCodec(2), false });
-    r.add(new Object[] { CodecFactory.xzCodec(1), CodecFactory.xzCodec(2), true });
-    r.add(new Object[] { CodecFactory.xzCodec(2), CodecFactory.nullCodec(), false });
-    r.add(new Object[] { CodecFactory.nullCodec(), CodecFactory.xzCodec(2), false });
     return r;
   }
 
diff -pur ../avro_clean/lang/java/avro/src/test/java/org/apache/avro/TestDataFile.java ./src/test/java/org/apache/avro/TestDataFile.java
--- ../avro_clean/lang/java/avro/src/test/java/org/apache/avro/TestDataFile.java	2024-03-21 13:55:19.946205463 -0500
+++ ./src/test/java/org/apache/avro/TestDataFile.java	2024-03-16 18:53:23.631001051 -0500
@@ -66,15 +66,6 @@ public class TestDataFile {
     r.add(new Object[] { CodecFactory.deflateCodec(9) });
     r.add(new Object[] { CodecFactory.nullCodec() });
     r.add(new Object[] { CodecFactory.snappyCodec() });
-    r.add(new Object[] { CodecFactory.xzCodec(0) });
-    r.add(new Object[] { CodecFactory.xzCodec(1) });
-    r.add(new Object[] { CodecFactory.xzCodec(6) });
-    r.add(new Object[] { CodecFactory.zstandardCodec(-5) });
-    r.add(new Object[] { CodecFactory.zstandardCodec(0, true) });
-    r.add(new Object[] { CodecFactory.zstandardCodec(5, false) });
-    r.add(new Object[] { CodecFactory.zstandardCodec(18, true) });
-    r.add(new Object[] { CodecFactory.zstandardCodec(0, false, false) });
-    r.add(new Object[] { CodecFactory.zstandardCodec(0, false, true) });
     return r.stream().map(Arguments::of);
   }
 
@@ -263,7 +254,7 @@ public class TestDataFile {
 
   @Test
   public void testSyncInHeader() throws IOException {
-    try (DataFileReader<Object> reader = new DataFileReader<>(new File("../../../share/test/data/syncInMeta.avro"),
+    try (DataFileReader<Object> reader = new DataFileReader<>(new File("./share/test/data/syncInMeta.avro"),
         new GenericDatumReader<>())) {
       reader.sync(0);
       for (Object datum : reader)
@@ -273,7 +264,7 @@ public class TestDataFile {
 
   @Test
   public void test12() throws IOException {
-    readFile(new File("../../../share/test/data/test.avro12"), new GenericDatumReader<>());
+    readFile(new File("./share/test/data/test.avro12"), new GenericDatumReader<>());
   }
 
   @Test
diff -pur ../avro_clean/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCommons.java ./src/test/java/org/apache/avro/TestSchemaCommons.java
--- ../avro_clean/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCommons.java	2024-03-21 13:55:19.946205463 -0500
+++ ./src/test/java/org/apache/avro/TestSchemaCommons.java	2024-03-16 18:58:56.454730549 -0500
@@ -79,7 +79,7 @@ public class TestSchemaCommons {
   }
 
   public static Stream<Arguments> sharedFolders() {
-    File root = new File("../../../share/test/data/schemas");
+    File root = new File("./share/test/data/schemas");
     return Arrays.stream(root.listFiles(File::isDirectory)).map(Arguments::of);
   }
 
Only in .: target
